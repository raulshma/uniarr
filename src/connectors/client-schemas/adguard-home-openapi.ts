/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get DNS server current status and general settings */
        get: operations["status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dns_info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get general DNS parameters */
        get: operations["dnsInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dns_config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set general DNS parameters */
        post: operations["dnsConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/protection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set protection state and duration */
        post: operations["setProtection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cache_clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Clear DNS cache */
        post: operations["cacheClear"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/test_upstream_dns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test upstream configuration */
        post: operations["testUpstreamDNS"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Gets information about the latest available version of AdGuard
         *      */
        post: operations["getVersionJson"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Begin auto-upgrade procedure */
        post: operations["beginUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/querylog": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get DNS server query log. */
        get: operations["queryLog"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/querylog_info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get query log parameters
         * @deprecated
         * @description Deprecated: Use `GET /querylog/config` instead.
         *
         *     NOTE: If `interval` was configured by editing configuration file or new
         *     HTTP API call `PUT /querylog/config/update` and it's not equal to
         *     previous allowed enum values then it will be equal to `90` days for
         *     compatibility reasons.
         *
         */
        get: operations["queryLogInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/querylog_config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set query log parameters
         * @deprecated
         * @description Deprecated: Use `PUT /querylog/config/update` instead.
         *
         */
        post: operations["queryLogConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/querylog_clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Clear query log */
        post: operations["querylogClear"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/querylog/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get query log parameters */
        get: operations["getQueryLogConfig"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/querylog/config/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set query log parameters */
        put: operations["putQueryLogConfig"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get DNS server statistics */
        get: operations["stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats_reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset all statistics to zeroes */
        post: operations["statsReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats_info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get statistics parameters
         * @deprecated
         * @description Deprecated: Use `GET /stats/config` instead.
         *
         *     NOTE: If `interval` was configured by editing configuration file or new
         *     HTTP API call `PUT /stats/config/update` and it's not equal to
         *     previous allowed enum values then it will be equal to `90` days for
         *     compatibility reasons.
         *
         */
        get: operations["statsInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats_config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set statistics parameters
         * @deprecated
         * @description Deprecated: Use `PUT /stats/config/update` instead.
         *
         */
        post: operations["statsConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get statistics parameters */
        get: operations["getStatsConfig"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats/config/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set statistics parameters */
        put: operations["putStatsConfig"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tls/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns TLS configuration and its status */
        get: operations["tlsStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tls/configure": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Updates current TLS configuration */
        post: operations["tlsConfigure"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tls/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Checks if the current TLS configuration is valid */
        post: operations["tlsValidate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dhcp/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets the current DHCP settings and status */
        get: operations["dhcpStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dhcp/interfaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets the available interfaces */
        get: operations["dhcpInterfaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dhcp/set_config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Updates the current DHCP server configuration */
        post: operations["dhcpSetConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dhcp/find_active_dhcp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Searches for an active DHCP server on the network */
        post: operations["checkActiveDhcp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dhcp/add_static_lease": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adds a static lease */
        post: operations["dhcpAddStaticLease"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dhcp/remove_static_lease": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Removes a static lease */
        post: operations["dhcpRemoveStaticLease"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dhcp/update_static_lease": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Updates a static lease
         * @description Updates IP address, hostname of the static lease.  IP version must be the same as previous.
         *
         */
        post: operations["dhcpUpdateStaticLease"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dhcp/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset DHCP configuration */
        post: operations["dhcpReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dhcp/reset_leases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset DHCP leases */
        post: operations["dhcpResetLeases"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/filtering/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get filtering parameters */
        get: operations["filteringStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/filtering/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set filtering parameters */
        post: operations["filteringConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/filtering/add_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add filter URL or an absolute file path */
        post: operations["filteringAddURL"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/filtering/remove_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove filter URL */
        post: operations["filteringRemoveURL"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/filtering/set_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set URL parameters */
        post: operations["filteringSetURL"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/filtering/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reload filtering rules from URLs.  This might be needed if new URL was just added and you don't want to wait for automatic refresh to kick in. This API request is ratelimited, so you can call it freely as often as you like, it wont create unnecessary burden on servers that host the URL.  This should work as intended, a `force` parameter is offered as last-resort attempt to make filter lists fresh.  If you ever find yourself using `force` to make something work that otherwise wont, this is a bug and report it accordingly.
         *      */
        post: operations["filteringRefresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/filtering/set_rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set user-defined filter rules */
        post: operations["filteringSetRules"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/filtering/check_host": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if host name is filtered */
        get: operations["filteringCheckHost"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/safebrowsing/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable safebrowsing */
        post: operations["safebrowsingEnable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/safebrowsing/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disable safebrowsing */
        post: operations["safebrowsingDisable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/safebrowsing/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get safebrowsing status */
        get: operations["safebrowsingStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parental/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable parental filtering */
        post: operations["parentalEnable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parental/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disable parental filtering */
        post: operations["parentalDisable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parental/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get parental filtering status */
        get: operations["parentalStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/safesearch/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable safesearch
         * @deprecated
         */
        post: operations["safesearchEnable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/safesearch/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable safesearch
         * @deprecated
         */
        post: operations["safesearchDisable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/safesearch/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update safesearch settings */
        put: operations["safesearchSettings"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/safesearch/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get safesearch status */
        get: operations["safesearchStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about configured clients */
        get: operations["clientsStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clients/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a new client */
        post: operations["clientsAdd"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clients/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove a client */
        post: operations["clientsDelete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clients/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update client information */
        post: operations["clientsUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clients/find": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get information about clients by their IP addresses or ClientIDs.
         *
         * @deprecated
         * @description Deprecated: Use `POST /clients/search` instead.
         *
         */
        get: operations["clientsFind"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clients/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Retrieve information about clients by performing an exact match search using IP addresses, CIDRs, MAC addresses, or ClientIDs.
         *      */
        post: operations["clientsSearch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/access/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List (dis)allowed clients, blocked hosts, etc. */
        get: operations["accessList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/access/set": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set (dis)allowed clients, blocked hosts, etc. */
        post: operations["accessSet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocked_services/services": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available services to use for blocking
         * @deprecated
         * @description Deprecated: Use `GET /blocked_services/all` instead.
         *
         */
        get: operations["blockedServicesAvailableServices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocked_services/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available services to use for blocking */
        get: operations["blockedServicesAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocked_services/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get blocked services list
         * @deprecated
         * @description Deprecated: Use `GET /blocked_services/get` instead.
         *
         */
        get: operations["blockedServicesList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocked_services/set": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set blocked services list
         * @deprecated
         * @description Deprecated: Use `PUT /blocked_services/update` instead.
         *
         */
        post: operations["blockedServicesSet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocked_services/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get blocked services */
        get: operations["blockedServicesSchedule"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocked_services/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update blocked services */
        put: operations["blockedServicesScheduleUpdate"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rewrite/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of Rewrite rules */
        get: operations["rewriteList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rewrite/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a new Rewrite rule */
        post: operations["rewriteAdd"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rewrite/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove a Rewrite rule */
        post: operations["rewriteDelete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rewrite/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get rewrite settings */
        get: operations["rewriteSettingsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rewrite/settings/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update rewrite settings */
        put: operations["rewriteSettingsUpdate"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rewrite/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a Rewrite rule */
        put: operations["rewriteUpdate"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/i18n/change_language": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change current language.  Argument must be an ISO 639-1 two-letter code.
         *
         * @deprecated
         * @description Deprecated: Use `PUT /control/profile` instead.
         *
         */
        post: operations["changeLanguage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/i18n/current_language": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get currently set language.  Result is ISO 639-1 two-letter code.  Empty result means default language.
         *
         * @deprecated
         * @description Deprecated: Use `GET /control/profile` instead.
         *
         */
        get: operations["currentLanguage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/install/get_addresses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets the network interfaces information. */
        get: operations["installGetAddresses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/install/check_config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Checks configuration */
        post: operations["installCheckConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/install/configure": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Applies the initial configuration. */
        post: operations["installConfigure"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Perform administrator log-in */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Perform administrator log-out */
        get: operations["logout"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates current user info */
        put: operations["updateProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apple/doh.mobileconfig": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get DNS over HTTPS .mobileconfig. */
        get: operations["mobileConfigDoH"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apple/dot.mobileconfig": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get DNS over TLS .mobileconfig. */
        get: operations["mobileConfigDoT"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description AdGuard Home server status and configuration */
        ServerStatus: {
            /** @example [
             *       "127.0.0.1"
             *     ] */
            dns_addresses: string[];
            /**
             * Format: uint16
             * @example 53
             */
            dns_port: number;
            /**
             * Format: uint16
             * @example 80
             */
            http_port: number;
            protection_enabled: boolean;
            /** Format: int64 */
            protection_disabled_duration?: number;
            dhcp_available?: boolean;
            running: boolean;
            /** @example v0.123.4 */
            version: string;
            /** @example en */
            language: string;
        };
        /** @description DNS server configuration */
        DNSConfig: {
            /**
             * @description Bootstrap servers, port is optional after colon.  Empty value will reset it to default values.
             *
             * @example [
             *       "8.8.8.8:53",
             *       "1.1.1.1:53"
             *     ]
             */
            bootstrap_dns?: string[];
            /**
             * @description Upstream servers, port is optional after colon.  Empty value will reset it to default values.
             *
             * @example [
             *       "tls://1.1.1.1",
             *       "tls://1.0.0.1"
             *     ]
             */
            upstream_dns?: string[];
            /**
             * @description List of fallback DNS servers used when upstream DNS servers are not responding.  Empty value will clear the list.
             *
             * @example [
             *       "8.8.8.8",
             *       "1.1.1.1:53"
             *     ]
             */
            fallback_dns?: string[];
            upstream_dns_file?: string;
            protection_enabled?: boolean;
            ratelimit?: number;
            /**
             * @description Length of the subnet mask for IPv4 addresses.
             * @default 24
             */
            ratelimit_subnet_subnet_len_ipv4: number;
            /**
             * @description Length of the subnet mask for IPv6 addresses.
             * @default 56
             */
            ratelimit_subnet_subnet_len_ipv6: number;
            /** @description List of IP addresses excluded from rate limiting. */
            ratelimit_whitelist?: string[];
            /** @enum {string} */
            blocking_mode?: "default" | "refused" | "nxdomain" | "null_ip" | "custom_ip";
            blocking_ipv4?: string;
            blocking_ipv6?: string;
            /** @description TTL for blocked responses. */
            blocked_response_ttl?: number;
            /**
             * @description Protection is pause until this time.  Nullable.
             * @example 2018-11-26T00:02:41+03:00
             */
            protection_disabled_until?: string;
            edns_cs_enabled?: boolean;
            edns_cs_use_custom?: boolean;
            edns_cs_custom_ip?: string;
            disable_ipv6?: boolean;
            dnssec_enabled?: boolean;
            cache_size?: number;
            cache_ttl_min?: number;
            cache_ttl_max?: number;
            /** @description Enables or disables the DNS response cache.
             *
             *     If `cache_enabled` is `true`, the companion field `cache_size` must
             *     be present and greater than 0, or the `dns.cache_size` setting in
             *     the configuration file must already be greater than 0.
             *      */
            cache_enabled?: boolean;
            cache_optimistic?: boolean;
            /**
             * @description Upstream modes enumeration.
             * @enum {string}
             */
            upstream_mode?: {
                const: "";
                deprecated: true;
                description: "Use `load_balance` instead.";
            } | {
                const: "fastest_addr";
            } | {
                const: "load_balance";
            } | {
                const: "parallel";
            };
            use_private_ptr_resolvers?: boolean;
            resolve_clients?: boolean;
            /**
             * @description Upstream servers, port is optional after colon.  Empty value will reset it to default values.
             *
             * @example [
             *       "tls://1.1.1.1",
             *       "tls://1.0.0.1"
             *     ]
             */
            local_ptr_upstreams?: string[];
            /** @description The number of seconds to wait for a response from the upstream server */
            upstream_timeout?: number;
        };
        /** @description Upstream configuration to be tested */
        UpstreamsConfig: {
            /**
             * @description Bootstrap DNS servers, port is optional after colon.
             *
             * @example [
             *       "8.8.8.8:53",
             *       "1.1.1.1:53"
             *     ]
             */
            bootstrap_dns: string[];
            /**
             * @description Upstream DNS servers, port is optional after colon.
             *
             * @example [
             *       "tls://1.1.1.1",
             *       "tls://1.0.0.1"
             *     ]
             */
            upstream_dns: string[];
            /**
             * @description Fallback DNS servers, port is optional after colon.
             *
             * @example [
             *       "8.8.8.8",
             *       "1.1.1.1:53"
             *     ]
             */
            fallback_dns?: string[];
            /**
             * @description Local PTR resolvers, port is optional after colon.
             *
             * @example [
             *       "tls://1.1.1.1",
             *       "tls://1.0.0.1"
             *     ]
             */
            private_upstream?: string[];
        };
        /** @description Upstreams configuration response */
        UpstreamsConfigResponse: {
            [key: string]: string;
        };
        /** @description Filter subscription info */
        Filter: {
            enabled: boolean;
            /**
             * Format: int64
             * @example 1234
             */
            id: number;
            /**
             * Format: date-time
             * @example 2018-10-30T12:18:57+03:00
             */
            last_updated?: string;
            /** @example AdGuard Simplified Domain Names filter */
            name: string;
            /**
             * Format: uint32
             * @example 5912
             */
            rules_count: number;
            /** @example https://adguardteam.github.io/AdGuardSDNSFilter/Filters/filter.txt
             *      */
            url: string;
        };
        /** @description Filtering settings */
        FilterStatus: {
            enabled?: boolean;
            interval?: number;
            filters?: components["schemas"]["Filter"][];
            whitelist_filters?: components["schemas"]["Filter"][];
            user_rules?: string[];
        };
        /** @description Filtering settings */
        FilterConfig: {
            enabled?: boolean;
            interval?: number;
        };
        /** @description Filtering URL settings */
        FilterSetUrl: {
            data?: components["schemas"]["FilterSetUrlData"];
            url?: string;
            whitelist?: boolean;
        };
        /** @description Filter update data */
        FilterSetUrlData: {
            enabled: boolean;
            /** @example AdGuard Simplified Domain Names filter */
            name: string;
            /** @example https://adguardteam.github.io/AdGuardSDNSFilter/Filters/filter.txt
             *      */
            url: string;
        };
        /** @description Refresh Filters request data */
        FilterRefreshRequest: {
            whitelist?: boolean;
        };
        /** @description Check Host Result */
        FilterCheckHostResponse: {
            /**
             * @description Request filtering status.
             * @enum {string}
             */
            reason?: "NotFilteredNotFound" | "NotFilteredWhiteList" | "NotFilteredError" | "FilteredBlackList" | "FilteredSafeBrowsing" | "FilteredParental" | "FilteredInvalid" | "FilteredSafeSearch" | "FilteredBlockedService" | "Rewrite" | "RewriteEtcHosts" | "RewriteRule";
            /**
             * @deprecated
             * @description In case if there's a rule applied to this DNS request, this is ID of the filter list that the rule belongs to.
             *     Deprecated: use `rules[*].filter_list_id` instead.
             *
             */
            filter_id?: number;
            /**
             * @deprecated
             * @description Filtering rule applied to the request (if any).
             *     Deprecated: use `rules[*].text` instead.
             *
             * @example ||example.org^
             */
            rule?: string;
            /** @description Applied rules. */
            rules?: components["schemas"]["ResultRule"][];
            /** @description Set if reason=FilteredBlockedService */
            service_name?: string;
            /** @description Set if reason=Rewrite */
            cname?: string;
            /** @description Set if reason=Rewrite */
            ip_addrs?: string[];
        };
        /** @description /filtering/refresh response data */
        FilterRefreshResponse: {
            updated?: number;
        };
        /**
         * @description Custom filtering rules setting request.
         * @example {
         *       "rules": [
         *         "||example.com^",
         *         "# comment",
         *         "@@||www.example.com^"
         *       ]
         *     }
         */
        SetRulesRequest: {
            rules?: string[];
        };
        /** @description /version.json request data */
        GetVersionRequest: {
            /** @description If false, server will check for a new version data only once in several hours.
             *      */
            recheck_now?: boolean;
        };
        /** @description Information about the latest available version of AdGuard Home.
         *      */
        VersionInfo: {
            /** @description If true then other fields doesn't appear.
             *      */
            disabled: boolean;
            /** @example v0.9 */
            new_version?: string;
            /** @example AdGuard Home v0.9 is now available! */
            announcement?: string;
            /** @example https://github.com/AdguardTeam/AdGuardHome/releases/tag/v0.9
             *      */
            announcement_url?: string;
            can_autoupdate?: boolean;
        };
        /** @description Server statistics data */
        Stats: {
            /**
             * @description Time units
             * @example hours
             * @enum {string}
             */
            time_units?: "hours" | "days";
            /**
             * @description Total number of DNS queries
             * @example 123
             */
            num_dns_queries?: number;
            /**
             * @description Number of requests blocked by filtering rules
             * @example 50
             */
            num_blocked_filtering?: number;
            /**
             * @description Number of requests blocked by safebrowsing module
             * @example 5
             */
            num_replaced_safebrowsing?: number;
            /**
             * @description Number of requests blocked by safesearch module
             * @example 5
             */
            num_replaced_safesearch?: number;
            /**
             * @description Number of blocked adult websites
             * @example 15
             */
            num_replaced_parental?: number;
            /**
             * Format: float
             * @description Average time in seconds on processing a DNS request
             * @example 0.34
             */
            avg_processing_time?: number;
            top_queried_domains?: components["schemas"]["TopArrayEntry"][];
            top_clients?: components["schemas"]["TopArrayEntry"][];
            top_blocked_domains?: components["schemas"]["TopArrayEntry"][];
            /** @description Total number of responses from each upstream. */
            top_upstreams_responses?: components["schemas"]["TopArrayEntry"][];
            /** @description Average processing time in seconds of requests from each upstream.
             *      */
            top_upstreams_avg_time?: components["schemas"]["TopArrayEntry"][];
            dns_queries?: number[];
            blocked_filtering?: number[];
            replaced_safebrowsing?: number[];
            replaced_parental?: number[];
        };
        /** @description Represent the number of hits or time duration per key (url, domain, or client IP).
         *      */
        TopArrayEntry: {
            domain_or_ip?: number;
        } & {
            [key: string]: number;
        };
        /** @description Statistics configuration */
        StatsConfig: {
            /**
             * @description Time period to keep the data.  `0` means that the statistics is disabled.
             *
             * @enum {integer}
             */
            interval?: 0 | 1 | 7 | 30 | 90;
        };
        /** @description Statistics configuration */
        GetStatsConfigResponse: {
            /** @description Are statistics enabled */
            enabled: boolean;
            /** @description Statistics rotation interval in milliseconds */
            interval: number;
            /** @description List of host names, which should not be counted */
            ignored: string[];
        };
        PutStatsConfigUpdateRequest: components["schemas"]["GetStatsConfigResponse"];
        DhcpConfig: {
            enabled?: boolean;
            interface_name?: string;
            v4?: components["schemas"]["DhcpConfigV4"];
            v6?: components["schemas"]["DhcpConfigV6"];
        };
        DhcpConfigV4: {
            /** @example 192.168.1.1 */
            gateway_ip?: string;
            /** @example 255.255.255.0 */
            subnet_mask?: string;
            /** @example 192.168.1.2 */
            range_start?: string;
            /** @example 192.168.10.50 */
            range_end?: string;
            lease_duration?: number;
        };
        DhcpConfigV6: {
            range_start?: string;
            lease_duration?: number;
        };
        /** @description DHCP lease information */
        DhcpLease: {
            /** @example 00:11:09:b3:b3:b8 */
            mac: string;
            /** @example 192.168.1.22 */
            ip: string;
            /** @example dell */
            hostname: string;
            /** @example 2017-07-21T17:32:28Z */
            expires: string;
        };
        /** @description DHCP static lease information */
        DhcpStaticLease: {
            /** @example 00:11:09:b3:b3:b8 */
            mac: string;
            /** @example 192.168.1.22 */
            ip: string;
            /** @example dell */
            hostname: string;
        };
        /** @description Built-in DHCP server configuration and status */
        DhcpStatus: {
            enabled?: boolean;
            interface_name?: string;
            v4?: components["schemas"]["DhcpConfigV4"];
            v6?: components["schemas"]["DhcpConfigV6"];
            leases: components["schemas"]["DhcpLease"][];
            static_leases?: components["schemas"]["DhcpStaticLease"][];
        };
        /** @description Network interfaces dictionary, keys are interface names.
         *      */
        NetInterfaces: {
            [key: string]: components["schemas"]["NetInterface"];
        };
        /** @description Request for checking for other DHCP servers in the network.
         *      */
        DhcpFindActiveReq: {
            /**
             * @description The name of the network interface
             * @example eth0
             */
            interface?: string;
        };
        /** @description Information about a DHCP server discovered in the current network.
         *      */
        DhcpSearchResult: {
            v4?: components["schemas"]["DhcpSearchV4"];
            v6?: components["schemas"]["DhcpSearchV6"];
        };
        DhcpSearchV4: {
            other_server?: components["schemas"]["DhcpSearchResultOtherServer"];
            static_ip?: components["schemas"]["DhcpSearchResultStaticIP"];
        };
        DhcpSearchV6: {
            other_server?: components["schemas"]["DhcpSearchResultOtherServer"];
        };
        DhcpSearchResultOtherServer: {
            /**
             * @description The result of searching the other DHCP server.
             *
             * @example no
             * @enum {string}
             */
            found?: "yes" | "no" | "error";
            /**
             * @description Set if found=error
             * @example
             */
            error?: string;
        };
        DhcpSearchResultStaticIP: {
            /**
             * @description The result of determining static IP address.
             *
             * @example yes
             * @enum {string}
             */
            static?: "yes" | "no" | "error";
            /**
             * @description Set if static=no
             * @example
             */
            ip?: string;
        };
        /** @description DNS answer section */
        DnsAnswer: {
            /**
             * Format: uint32
             * @example 55
             */
            ttl?: number;
            /** @example A */
            type?: string;
            /** @example 217.69.139.201 */
            value?: string;
        };
        /** @description DNS question section */
        DnsQuestion: {
            /** @example IN */
            class?: string;
            /** @example xn--d1abbgf6aiiy.xn--p1ai */
            name?: string;
            /** @example президент.рф */
            unicode_name?: string;
            /** @example A */
            type?: string;
        };
        /** @description /add_url request data */
        AddUrlRequest: {
            name?: string;
            /**
             * @description URL or an absolute path to the file containing filtering rules.
             *
             * @example https://filters.adtidy.org/windows/filters/15.txt
             */
            url?: string;
            whitelist?: boolean;
        };
        /** @description /remove_url request data */
        RemoveUrlRequest: {
            /**
             * @description Previously added URL containing filtering rules
             * @example https://filters.adtidy.org/windows/filters/15.txt
             */
            url?: string;
            whitelist?: boolean;
        };
        /** @description Query log item */
        QueryLogItem: {
            answer?: components["schemas"]["DnsAnswer"][];
            /** @description Answer from upstream server (optional) */
            original_answer?: components["schemas"]["DnsAnswer"][];
            /** @description Defines if the response has been served from cache.
             *      */
            cached?: boolean;
            /** @description Upstream URL starting with tcp://, tls://, https://, or with an IP address.
             *      */
            upstream?: string;
            /** @description If true, the response had the Authenticated Data (AD) flag set.
             *      */
            answer_dnssec?: boolean;
            /**
             * @description The client's IP address.
             *
             * @example 192.168.0.1
             */
            client?: string;
            /**
             * @description The ClientID, if provided in DoH, DoQ, or DoT.
             *
             * @example cli123
             */
            client_id?: string;
            client_info?: components["schemas"]["QueryLogItemClient"];
            /** @enum {string} */
            client_proto?: "dot" | "doh" | "doq" | "dnscrypt" | "";
            /**
             * @description The IP network defined by an EDNS Client-Subnet option in the request message if any.
             *
             * @example 192.168.0.0/16
             */
            ecs?: string;
            /** @example 54.023928 */
            elapsedMs?: string;
            question?: components["schemas"]["DnsQuestion"];
            /**
             * @deprecated
             * @description In case if there's a rule applied to this DNS request, this is ID of the filter list that the rule belongs to.
             *     Deprecated: use `rules[*].filter_list_id` instead.
             *
             * @example 123123
             */
            filterId?: number;
            /**
             * @deprecated
             * @description Filtering rule applied to the request (if any).
             *     Deprecated: use `rules[*].text` instead.
             *
             * @example ||example.org^
             */
            rule?: string;
            /** @description Applied rules. */
            rules?: components["schemas"]["ResultRule"][];
            /**
             * @description Request filtering status.
             * @enum {string}
             */
            reason?: "NotFilteredNotFound" | "NotFilteredWhiteList" | "NotFilteredError" | "FilteredBlackList" | "FilteredSafeBrowsing" | "FilteredParental" | "FilteredInvalid" | "FilteredSafeSearch" | "FilteredBlockedService" | "Rewrite" | "RewriteEtcHosts" | "RewriteRule";
            /** @description Set if reason=FilteredBlockedService */
            service_name?: string;
            /**
             * @description DNS response status
             * @example NOERROR
             */
            status?: string;
            /**
             * @description DNS request processing start time
             * @example 2018-11-26T00:02:41+03:00
             */
            time?: string;
        };
        /** @description Client information for a query log item.
         *      */
        QueryLogItemClient: {
            /** @description Whether the client's IP is blocked or not.
             *      */
            disallowed: boolean;
            /** @description The rule due to which the client is allowed or blocked.
             *      */
            disallowed_rule: string;
            /** @description Persistent client's name or runtime client's hostname.  May be empty.
             *      */
            name: string;
            whois: components["schemas"]["QueryLogItemClientWhois"];
        };
        /** @description Client WHOIS information, if any.
         *      */
        QueryLogItemClientWhois: {
            /** @description City, if any.
             *      */
            city?: string;
            /** @description Country, if any.
             *      */
            country?: string;
            /** @description Organization name, if any.
             *      */
            orgname?: string;
        };
        /** @description Query log */
        QueryLog: {
            /** @example 2018-11-26T00:02:41+03:00 */
            oldest?: string;
            data?: components["schemas"]["QueryLogItem"][];
        };
        /** @description Query log configuration */
        QueryLogConfig: {
            /** @description Is query log enabled */
            enabled?: boolean;
            /**
             * @description Time period for query log rotation.
             *
             * @enum {number}
             */
            interval?: 0.25 | 1 | 7 | 30 | 90;
            /** @description Anonymize clients' IP addresses */
            anonymize_client_ip?: boolean;
        };
        /** @description Query log configuration */
        GetQueryLogConfigResponse: {
            /** @description Is query log enabled */
            enabled: boolean;
            /** @description Time period for query log rotation in milliseconds.
             *      */
            interval: number;
            /** @description Anonymize clients' IP addresses */
            anonymize_client_ip: boolean;
            /** @description List of host names, which should not be written to log */
            ignored: string[];
        };
        PutQueryLogConfigUpdateRequest: components["schemas"]["GetQueryLogConfigResponse"];
        /** @description Applied rule. */
        ResultRule: {
            /**
             * Format: int64
             * @description In case if there's a rule applied to this DNS request, this is ID of the filter list that the rule belongs to.
             *
             * @example 123123
             */
            filter_list_id?: number;
            /**
             * @description The text of the filtering rule applied to the request (if any).
             *
             * @example ||example.org^
             */
            text?: string;
        };
        /** @description TLS configuration settings and status */
        TlsConfig: {
            /**
             * @description enabled is the encryption (DoT/DoH/HTTPS) status
             * @example true
             */
            enabled?: boolean;
            /**
             * @description server_name is the hostname of your HTTPS/TLS server
             * @example example.org
             */
            server_name?: string;
            /**
             * @description if true, forces HTTP->HTTPS redirect
             * @example true
             */
            force_https?: boolean;
            /**
             * Format: uint16
             * @description HTTPS port. If 0, HTTPS will be disabled.
             * @example 443
             */
            port_https?: number;
            /**
             * Format: uint16
             * @description DNS-over-TLS port. If 0, DoT will be disabled.
             * @example 853
             */
            port_dns_over_tls?: number;
            /**
             * Format: uint16
             * @description DNS-over-QUIC port. If 0, DoQ will be disabled.
             * @example 784
             */
            port_dns_over_quic?: number;
            /** @description Base64 string with PEM-encoded certificates chain */
            certificate_chain?: string;
            /** @description Base64 string with PEM-encoded private key */
            private_key?: string;
            /**
             * @description Set to true if the user has previously saved a private key as a string.  This is used so that the server and the client don't have to send the private key between each other every time, which might lead to security issues.
             *
             * @example true
             */
            private_key_saved?: boolean;
            /** @description Path to certificate file */
            certificate_path?: string;
            /** @description Path to private key file */
            private_key_path?: string;
            /**
             * @description Set to true if the specified certificates chain is a valid chain of X509 certificates.
             *
             * @example true
             */
            valid_cert?: boolean;
            /**
             * @description Set to true if the specified certificates chain is verified and issued by a known CA.
             *
             * @example true
             */
            valid_chain?: boolean;
            /**
             * @description The subject of the first certificate in the chain.
             * @example CN=example.org
             */
            subject?: string;
            /**
             * @description The issuer of the first certificate in the chain.
             * @example CN=Let's Encrypt Authority X3,O=Let's Encrypt,C=US
             */
            issuer?: string;
            /**
             * @description The NotBefore field of the first certificate in the chain.
             *
             * @example 2019-01-31T10:47:32Z
             */
            not_before?: string;
            /**
             * @description The NotAfter field of the first certificate in the chain.
             *
             * @example 2019-05-01T10:47:32Z
             */
            not_after?: string;
            /**
             * @description The value of SubjectAltNames field of the first certificate in the chain.
             *
             * @example [
             *       "*.example.org"
             *     ]
             */
            dns_names?: string[];
            /**
             * @description Set to true if the key is a valid private key.
             * @example true
             */
            valid_key?: boolean;
            /**
             * @description Key type.
             * @example RSA
             * @enum {string}
             */
            key_type?: "RSA" | "ECDSA";
            /**
             * @description A validation warning message with the issue description.
             *
             * @example You have specified an empty certificate
             */
            warning_validation?: string;
            /**
             * @description Set to true if both certificate and private key are correct.
             *
             * @example true
             */
            valid_pair?: boolean;
            /**
             * @description Set to true if plain DNS is allowed for incoming requests.
             *
             * @example true
             */
            serve_plain_dns?: boolean;
        };
        /** @description Network interface info */
        NetInterface: {
            /**
             * @description Flags could be any combination of the following values, divided by the "|" character: "up", "broadcast", "loopback", "pointtopoint" and "multicast".
             *
             * @example up|broadcast|multicast
             */
            flags: string;
            /**
             * @description The IP address of the gateway.
             * @example 192.0.2.0
             */
            gateway_ip: string;
            /** @example 52:54:00:11:09:ba */
            hardware_address: string;
            /** @description The addresses of the interface of v4 family.
             *      */
            ipv4_addresses: string[];
            /** @description The addresses of the interface of v6 family.
             *      */
            ipv6_addresses: string[];
            /** @example eth0 */
            name: string;
        };
        /** @description Port information */
        AddressInfo: {
            /** @example 127.0.0.1 */
            ip: string;
            /**
             * Format: uint16
             * @example 53
             */
            port: number;
        };
        /** @description AdGuard Home addresses configuration */
        AddressesInfo: {
            /**
             * Format: uint16
             * @example 53
             */
            dns_port: number;
            interfaces: components["schemas"]["NetInterfaces"];
            /** @example v0.123.4 */
            version: string;
            /**
             * Format: uint16
             * @example 80
             */
            web_port: number;
        };
        /** @description Protection state configuration */
        SetProtectionRequest: {
            enabled: boolean;
            /**
             * Format: uint64
             * @description Duration of a pause, in milliseconds.  Enabled should be false.
             */
            duration?: number;
        };
        /** @description Information about the current user */
        ProfileInfo: {
            name: string;
            language: string;
            /**
             * @description Interface theme
             * @enum {string}
             */
            theme: "auto" | "dark" | "light";
        };
        /** @description Safe search settings. */
        SafeSearchConfig: {
            enabled?: boolean;
            bing?: boolean;
            duckduckgo?: boolean;
            ecosia?: boolean;
            google?: boolean;
            pixabay?: boolean;
            yandex?: boolean;
            youtube?: boolean;
        };
        /** @description Sets periods of inactivity for filtering blocked services.  The schedule contains 7 days (Sunday to Saturday) and a time zone.
         *      */
        Schedule: {
            /** @description Time zone name according to IANA time zone database.  For example `Europe/Brussels`.  `Local` represents the system's local time zone.
             *      */
            time_zone?: string;
            sun?: components["schemas"]["DayRange"];
            mon?: components["schemas"]["DayRange"];
            tue?: components["schemas"]["DayRange"];
            wed?: components["schemas"]["DayRange"];
            thu?: components["schemas"]["DayRange"];
            fri?: components["schemas"]["DayRange"];
            sat?: components["schemas"]["DayRange"];
        };
        /** @description The single interval within a day.  It begins at the `start` and ends before the `end`.
         *      */
        DayRange: {
            /** @description The number of milliseconds elapsed from the start of a day.  It must be less than `end` and is expected to be rounded to minutes. So the maximum value is `86340000` (23 hours and 59 minutes).
             *      */
            start?: number;
            /** @description The number of milliseconds elapsed from the start of a day.  It is expected to be rounded to minutes.  The maximum value is `86400000` (24 hours).
             *      */
            end?: number;
        };
        /** @description Client information. */
        Client: {
            /**
             * @description Name
             * @example localhost
             */
            name?: string;
            /** @description IP, CIDR, MAC, or ClientID. */
            ids?: string[];
            use_global_settings?: boolean;
            filtering_enabled?: boolean;
            parental_enabled?: boolean;
            safebrowsing_enabled?: boolean;
            /** @deprecated */
            safesearch_enabled?: boolean;
            safe_search?: components["schemas"]["SafeSearchConfig"];
            use_global_blocked_services?: boolean;
            blocked_services_schedule?: components["schemas"]["Schedule"];
            blocked_services?: string[];
            upstreams?: string[];
            tags?: string[];
            /** @description NOTE: If `ignore_querylog` is not set in HTTP API `GET /clients/add`
             *     request then default value (false) will be used.
             *
             *     If `ignore_querylog` is not set in HTTP API `GET /clients/update`
             *     request then the existing value will not be changed.
             *
             *     This behaviour can be changed in the future versions.
             *      */
            ignore_querylog?: boolean;
            /** @description NOTE: If `ignore_statistics` is not set in HTTP API `GET
             *     /clients/add` request then default value (false) will be used.
             *
             *     If `ignore_statistics` is not set in HTTP API `GET /clients/update`
             *     request then the existing value will not be changed.
             *
             *     This behaviour can be changed in the future versions.
             *      */
            ignore_statistics?: boolean;
            /** @description NOTE: If `upstreams_cache_enabled` is not set in HTTP API
             *     `GET /clients/add` request then default value (false) will be used.
             *
             *     If `upstreams_cache_enabled` is not set in HTTP API
             *     `GET /clients/update` request then the existing value will not be
             *     changed.
             *
             *     This behaviour can be changed in the future versions.
             *      */
            upstreams_cache_enabled?: boolean;
            /** @description NOTE: If `upstreams_cache_enabled` is not set in HTTP API
             *     `GET /clients/update` request then the existing value will not be
             *     changed.
             *
             *     This behaviour can be changed in the future versions.
             *      */
            upstreams_cache_size?: number;
        };
        /** @description Auto-Client information */
        ClientAuto: {
            /**
             * @description IP address
             * @example 127.0.0.1
             */
            ip?: string;
            /**
             * @description Name
             * @example localhost
             */
            name?: string;
            /**
             * @description The source of this information
             * @example etc/hosts
             */
            source?: string;
            whois_info?: components["schemas"]["WhoisInfo"];
        };
        /** @description Client update request */
        ClientUpdate: {
            name?: string;
            data?: components["schemas"]["Client"];
        };
        /** @description Client delete request */
        ClientDelete: {
            name?: string;
        };
        /** @description Client search request */
        ClientsSearchRequest: {
            clients?: components["schemas"]["ClientsSearchRequestItem"][];
        };
        ClientsSearchRequestItem: {
            /** @description Client IP address, CIDR, MAC address, or ClientID */
            id?: string;
        };
        /**
         * @description Client search results.
         * @example [
         *       {
         *         "cli42": null,
         *         "name": "Client 42",
         *         "ids": [
         *           "cli42"
         *         ],
         *         "use_global_settings": true,
         *         "filtering_enabled": true,
         *         "parental_enabled": true,
         *         "safebrowsing_enabled": true,
         *         "safesearch_enabled": true,
         *         "safe_search": {},
         *         "use_global_blocked_services": true,
         *         "blocked_services": null,
         *         "upstreams": null,
         *         "whois_info": {},
         *         "disallowed": false,
         *         "disallowed_rule": "",
         *         "ignore_querylog": false,
         *         "ignore_statistics": false
         *       },
         *       {
         *         "1.2.3.4": null,
         *         "name": "Client 1-2-3-4",
         *         "ids": [
         *           "1.2.3.4"
         *         ],
         *         "use_global_settings": true,
         *         "filtering_enabled": true,
         *         "parental_enabled": true,
         *         "safebrowsing_enabled": true,
         *         "safesearch_enabled": true,
         *         "safe_search": {},
         *         "use_global_blocked_services": true,
         *         "blocked_services": null,
         *         "upstreams": null,
         *         "whois_info": {},
         *         "disallowed": false,
         *         "disallowed_rule": "",
         *         "ignore_querylog": false,
         *         "ignore_statistics": false
         *       }
         *     ]
         */
        ClientsFindResponse: components["schemas"]["ClientsFindEntry"][];
        AccessListResponse: components["schemas"]["AccessList"];
        AccessSetRequest: components["schemas"]["AccessList"];
        /** @description Client and host access list.  Each of the lists should contain only unique elements.  In addition, allowed and disallowed lists cannot contain the same elements.
         *      */
        AccessList: {
            /** @description The allowlist of clients: IP addresses, CIDRs, or ClientIDs.
             *      */
            allowed_clients?: string[];
            /** @description The blocklist of clients: IP addresses, CIDRs, or ClientIDs.
             *      */
            disallowed_clients?: string[];
            /** @description The blocklist of hosts. */
            blocked_hosts?: string[];
        };
        ClientsFindEntry: {
            [key: string]: components["schemas"]["ClientFindSubEntry"];
        };
        /** @description Client information. */
        ClientFindSubEntry: {
            /**
             * @description Name
             * @example localhost
             */
            name?: string;
            /** @description IP, CIDR, MAC, or ClientID. */
            ids?: string[];
            use_global_settings?: boolean;
            filtering_enabled?: boolean;
            parental_enabled?: boolean;
            safebrowsing_enabled?: boolean;
            /** @deprecated */
            safesearch_enabled?: boolean;
            safe_search?: components["schemas"]["SafeSearchConfig"];
            use_global_blocked_services?: boolean;
            blocked_services?: string[];
            upstreams?: string[];
            whois_info?: components["schemas"]["WhoisInfo"];
            /** @description Whether the client's IP is blocked or not.
             *      */
            disallowed?: boolean;
            /** @description The rule due to which the client is disallowed.  If disallowed is set to true, and this string is empty, then the client IP is disallowed by the "allowed IP list", that is it is not included in the allowed list.
             *      */
            disallowed_rule?: string;
            ignore_querylog?: boolean;
            ignore_statistics?: boolean;
        };
        WhoisInfo: {
            [key: string]: string;
        };
        Clients: {
            clients?: components["schemas"]["ClientsArray"];
            auto_clients?: components["schemas"]["ClientsAutoArray"];
            supported_tags?: string[];
        };
        /** @description Clients array */
        ClientsArray: components["schemas"]["Client"][];
        /** @description Auto-Clients array */
        ClientsAutoArray: components["schemas"]["ClientAuto"][];
        /** @description Rewrite rules array */
        RewriteList: components["schemas"]["RewriteEntry"][];
        /** @description Rewrite rule update object */
        RewriteUpdate: {
            target?: components["schemas"]["RewriteEntry"];
            update?: components["schemas"]["RewriteEntry"];
        };
        /** @description Rewrite rule */
        RewriteEntry: {
            /**
             * @description Domain name
             * @example example.org
             */
            domain?: string;
            /**
             * @description value of A, AAAA or CNAME DNS record
             * @example 127.0.0.1
             */
            answer?: string;
            /**
             * @description Optional. If omitted on add, defaults to `true`. On update, omitted preserves previous value.
             *
             * @default true
             * @example true
             */
            enabled: boolean;
        };
        /** @description DNS rewrite settings */
        RewriteSettings: {
            /**
             * @description indicates whether rewrites are applied
             * @example true
             */
            enabled: boolean;
        };
        BlockedServicesArray: string[];
        BlockedServicesAll: {
            blocked_services: components["schemas"]["BlockedService"][];
            groups: unknown;
        };
        BlockedService: {
            /** @description The SVG icon as a Base64-encoded string to make it easier to embed it into a data URL.
             *      */
            icon_svg: string;
            /** @description The ID of this service.
             *      */
            id: string;
            /** @description The human-readable name of this service.
             *      */
            name: string;
            /** @description The array of the filtering rules.
             *      */
            rules: string[];
            /** @description The ID of the group, that the service belongs to.
             *      */
            group_id?: string;
        };
        ServiceGroup: {
            /** @description The ID of this group.
             *      */
            id: string;
        };
        BlockedServicesSchedule: {
            schedule?: components["schemas"]["Schedule"];
            /** @description The names of the blocked services.
             *      */
            ids?: string[];
        };
        /** @description Configuration to be checked */
        CheckConfigRequest: {
            dns?: components["schemas"]["CheckConfigRequestInfo"];
            web?: components["schemas"]["CheckConfigRequestInfo"];
            /** @example false */
            set_static_ip?: boolean;
        };
        CheckConfigRequestInfo: {
            /** @example 127.0.0.1 */
            ip?: string;
            /**
             * Format: uint16
             * @example 53
             */
            port?: number;
            /** @example false */
            autofix?: boolean;
        };
        CheckConfigResponse: {
            dns: components["schemas"]["CheckConfigResponseInfo"];
            web: components["schemas"]["CheckConfigResponseInfo"];
            static_ip: components["schemas"]["CheckConfigStaticIpInfo"];
        };
        CheckConfigResponseInfo: {
            /** @default  */
            status: string;
            /** @example false */
            can_autofix: boolean;
        };
        /**
         * @description Can be: yes, no, error
         * @example no
         * @enum {string}
         */
        CheckConfigStaticIpInfoStatic: "yes" | "no" | "error";
        CheckConfigStaticIpInfo: {
            static?: components["schemas"]["CheckConfigStaticIpInfoStatic"];
            /**
             * @description Current dynamic IP address. Set if static=no
             * @default
             * @example 192.168.1.1
             */
            ip: string;
            /**
             * @description Error text. Set if static=error
             * @default
             */
            error: string;
        };
        /** @description AdGuard Home initial configuration for the first-install wizard.
         *      */
        InitialConfiguration: {
            dns: components["schemas"]["AddressInfo"];
            web: components["schemas"]["AddressInfo"];
            /**
             * @description Basic auth username
             * @example admin
             */
            username: string;
            /**
             * @description Basic auth password
             * @example password
             */
            password: string;
        };
        /** @description Login request data */
        Login: {
            /** @description User name */
            name?: string;
            /** @description Password */
            password?: string;
        };
        /** @description A generic JSON error response. */
        Error: {
            /** @description The error message, an opaque string. */
            message?: string;
        };
        /** @description Language settings object. */
        LanguageSettings: {
            /** @description The current language or the language to set. */
            language: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: {
        /** @description TLS configuration JSON */
        TlsConfig: {
            content: {
                "application/json": components["schemas"]["TlsConfig"];
            };
        };
        DhcpStaticLease: {
            content: {
                "application/json": components["schemas"]["DhcpStaticLease"];
            };
        };
        RewriteEntry: {
            content: {
                "application/json": components["schemas"]["RewriteEntry"];
            };
        };
        RewriteSettings: {
            content: {
                "application/json": components["schemas"]["RewriteSettings"];
            };
        };
        RewriteUpdate: {
            content: {
                "application/json": components["schemas"]["RewriteUpdate"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    status: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerStatus"];
                };
            };
        };
    };
    dnsInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DNSConfig"] & {
                        /** @example [
                         *       "192.168.168.192",
                         *       "10.0.0.10"
                         *     ] */
                        default_local_ptr_upstreams?: string[];
                    };
                };
            };
        };
    };
    dnsConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DNSConfig"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setProtection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SetProtectionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    cacheClear: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    testUpstreamDNS: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Upstream configuration to be tested */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpstreamsConfig"];
            };
        };
        responses: {
            /** @description Status of testing each requested server, with "OK" meaning that server works, any other text means an error.
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpstreamsConfigResponse"];
                };
            };
        };
    };
    getVersionJson: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetVersionRequest"];
            };
        };
        responses: {
            /** @description Version info.  If response message is empty, UI does not show a version update message.
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VersionInfo"];
                };
            };
            /** @description Cannot write answer */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Cannot retrieve the version.json file contents */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    beginUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    queryLog: {
        parameters: {
            query?: {
                /** @description Filter by older than */
                older_than?: string;
                /** @description Specify the ranking number of the first item on the page.  Even though it is possible to use "offset" and "older_than", we recommend choosing one of them and sticking to it.
                 *      */
                offset?: number;
                /** @description Limit the number of records to be returned */
                limit?: number;
                /** @description Filter by domain name or client IP */
                search?: string;
                /** @description Filter by response status */
                response_status?: "all" | "filtered" | "blocked" | "blocked_safebrowsing" | "blocked_parental" | "whitelisted" | "rewritten" | "safe_search" | "processed";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryLog"];
                };
            };
        };
    };
    queryLogInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryLogConfig"];
                };
            };
        };
    };
    queryLogConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["QueryLogConfig"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    querylogClear: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getQueryLogConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQueryLogConfigResponse"];
                };
            };
        };
    };
    putQueryLogConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PutQueryLogConfigUpdateRequest"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    stats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns statistics data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Stats"];
                };
            };
        };
    };
    statsReset: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    statsInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatsConfig"];
                };
            };
        };
    };
    statsConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["StatsConfig"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStatsConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetStatsConfigResponse"];
                };
            };
        };
    };
    putStatsConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PutStatsConfigUpdateRequest"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tlsStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TlsConfig"];
                };
            };
        };
    };
    tlsConfigure: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["TlsConfig"];
        responses: {
            /** @description TLS configuration and its status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TlsConfig"];
                };
            };
            /** @description Invalid configuration or unavailable port */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error occurred while applying configuration */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tlsValidate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["TlsConfig"];
        responses: {
            /** @description TLS configuration and its status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TlsConfig"];
                };
            };
            /** @description Invalid configuration or unavailable port */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dhcpStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DhcpStatus"];
                };
            };
            /** @description Not implemented (for example, on Windows). */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    dhcpInterfaces: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NetInterfaces"];
                };
            };
            /** @description Not implemented (for example, on Windows). */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    dhcpSetConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DhcpConfig"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not implemented (for example, on Windows). */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    checkActiveDhcp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DhcpFindActiveReq"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DhcpSearchResult"];
                };
            };
            /** @description Not implemented (for example, on Windows). */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    dhcpAddStaticLease: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["DhcpStaticLease"];
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not implemented (for example, on Windows). */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    dhcpRemoveStaticLease: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["DhcpStaticLease"];
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not implemented (for example, on Windows). */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    dhcpUpdateStaticLease: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["DhcpStaticLease"];
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not implemented (for example, on Windows). */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    dhcpReset: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not implemented (for example, on Windows). */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    dhcpResetLeases: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not implemented (for example, on Windows). */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    filteringStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilterStatus"];
                };
            };
        };
    };
    filteringConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FilterConfig"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    filteringAddURL: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddUrlRequest"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    filteringRemoveURL: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RemoveUrlRequest"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    filteringSetURL: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FilterSetUrl"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    filteringRefresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FilterRefreshRequest"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilterRefreshResponse"];
                };
            };
        };
    };
    filteringSetRules: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Custom filtering rules. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SetRulesRequest"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    filteringCheckHost: {
        parameters: {
            query: {
                /**
                 * @description Filter by host name
                 * @example google.com
                 */
                name: string;
                /**
                 * @description Optional ClientID or client IP address
                 * @example 192.0.2.1
                 */
                client?: string;
                /**
                 * @description Optional DNS type
                 * @example AAAA
                 */
                qtype?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilterCheckHostResponse"];
                };
            };
        };
    };
    safebrowsingEnable: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    safebrowsingDisable: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    safebrowsingStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        enabled?: boolean;
                    };
                };
            };
        };
    };
    parentalEnable: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    parentalDisable: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    parentalStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        enable?: boolean;
                        sensitivity?: number;
                    };
                };
            };
        };
    };
    safesearchEnable: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    safesearchDisable: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    safesearchSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SafeSearchConfig"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    safesearchStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SafeSearchConfig"];
                };
            };
        };
    };
    clientsStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Clients"];
                };
            };
        };
    };
    clientsAdd: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Client"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    clientsDelete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClientDelete"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    clientsUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClientUpdate"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    clientsFind: {
        parameters: {
            query?: {
                /** @description Filter by IP address or ClientIDs.  Parameters with names `ip1`, `ip2`, and so on are also accepted and interpreted as "ip0 OR ip1 OR ip2".
                 *     TODO(a.garipov): Replace with a better query API.
                 *      */
                ip0?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClientsFindResponse"];
                };
            };
        };
    };
    clientsSearch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClientsSearchRequest"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClientsFindResponse"];
                };
            };
        };
    };
    accessList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessListResponse"];
                };
            };
        };
    };
    accessSet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccessSetRequest"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to parse JSON or cannot save the list.
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    blockedServicesAvailableServices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockedServicesArray"];
                };
            };
        };
    };
    blockedServicesAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockedServicesAll"];
                };
            };
        };
    };
    blockedServicesList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockedServicesArray"];
                };
            };
        };
    };
    blockedServicesSet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BlockedServicesArray"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    blockedServicesSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockedServicesSchedule"];
                };
            };
        };
    };
    blockedServicesScheduleUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BlockedServicesSchedule"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    rewriteList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewriteList"];
                };
            };
        };
    };
    rewriteAdd: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["RewriteEntry"];
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    rewriteDelete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["RewriteEntry"];
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    rewriteSettingsGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewriteSettings"];
                };
            };
        };
    };
    rewriteSettingsUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["RewriteSettings"];
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    rewriteUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["RewriteUpdate"];
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    changeLanguage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description New language.  It must be known to the server and must be an ISO 639-1 two-letter code.
         *      */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LanguageSettings"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    currentLanguage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LanguageSettings"];
                };
            };
        };
    };
    installGetAddresses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddressesInfo"];
                };
            };
        };
    };
    installCheckConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Configuration to be checked */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckConfigRequest"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckConfigResponse"];
                };
            };
            /** @description Failed to parse JSON or cannot listen on the specified address.
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    installConfigure: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Initial configuration JSON */
        requestBody: {
            content: {
                "application/json": components["schemas"]["InitialConfiguration"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to parse initial configuration or cannot listen to the specified addresses.
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The specified password does not meet the strength requirements.
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Cannot start the DNS server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Login"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid username or password.
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Out of login attempts.
             *      */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProfileInfo"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileInfo"];
                };
            };
        };
    };
    mobileConfigDoH: {
        parameters: {
            query: {
                /**
                 * @description Host for which the config is generated.  If no host is provided, `tls.server_name` from the configuration file is used.  If `tls.server_name` is not set, the API returns an error with a 500 status.
                 *
                 * @example example.org
                 */
                host: string;
                /**
                 * @description ClientID.
                 *
                 * @example client-1
                 */
                client_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description DNS over HTTPS plist file. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server configuration error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    mobileConfigDoT: {
        parameters: {
            query: {
                /**
                 * @description Host for which the config is generated.  If no host is provided, `tls.server_name` from the configuration file is used.  If `tls.server_name` is not set, the API returns an error with a 500 status.
                 *
                 * @example example.org
                 */
                host: string;
                /**
                 * @description ClientID.
                 *
                 * @example client-1
                 */
                client_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description DNS over TLS plist file */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server configuration error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
